---
  defaultBaseImageVersion: latest
  properties:
  - name: API_KEY
    value: ${API_KEY}
    type: secure
  - name: PROD_CLUSTER_NAME
    value: ${PROD_CLUSTER_NAME}
    type: text
  - name: PROD_REGION_ID
    value: ${PROD_REGION_ID}
    type: text
  stages:
  - name: FETCH
    inputs:
    - type: git
      branch: master
      service: ${GIT_REPO}    
    triggers:
    - type: commit
    properties:
    - name: IMAGE_NAME
      value: ${APP_NAME}
      type: text
    jobs:
    - name: Fetch code
      type: builder
      artifact_dir: ''
      build_type: shell
      script: |+
        #!/bin/bash
        set -x
  
        # Git repo cloned at $WORKING_DIR, copy into $ARCHIVE_DIR
        mkdir -p $ARCHIVE_DIR
        cp -R -n ./ $ARCHIVE_DIR/ || true
  
        # Record git info
        echo "GIT_URL=${GIT_URL}" >> $ARCHIVE_DIR/build.properties
        echo "GIT_BRANCH=${GIT_BRANCH}" >> $ARCHIVE_DIR/# build.properties
        echo "GIT_COMMIT=${GIT_COMMIT}" >> $ARCHIVE_DIR/build.properties
        echo "SOURCE_BUILD_NUMBER=${BUILD_NUMBER}" >> $ARCHIVE_DIR/build.properties
        cat $ARCHIVE_DIR/build.properties
  
  - name: DEPLOY_SERVICES
    properties:
    - name: buildprops
      value: build.properties
      type: file
    - name: MY_REGISTRY_URL
      value: ${REGISTRY_URL}
      type: text
    - name: REGISTRY_NAMESPACE
      value: ${REGISTRY_NAMESPACE}
      type: text
    inputs:
    - type: job
      stage: FETCH
      job: Fetch code
    triggers:
    - type: stage
    jobs:    
    - name: Build java authors and save in IBM Cloud Container Registry
      type: builder
      build_type: cr
      artifact_dir: .
      target:
        region_id: ${REGISTRY_REGION_ID}
        api_key: ${API_KEY}
      namespace: ${REGISTRY_NAMESPACE}
      image_name: ${APP_NAME}
      script: |
        #!/bin/bash    
        root_folder=$(cd $(dirname $0); cd ..; pwd)
        MY_REGISTRY_URL=${REGISTRY_URL}
        
        cd ${root_folder}/authors-java-jee/
        ibmcloud cr build -f ${root_folder}/authors-java-jee/Dockerfile --tag $REGISTRY_URL/$REGISTRY_NAMESPACE/authors:1 .
    - name: Deploy java authors to 
      type: deployer
      build_type: kubernetes
      target:
        region_id: ${PROD_REGION_ID}
        api_key: ${API_KEY}
        kubernetes_cluster: ${PROD_CLUSTER_NAME}
      script: |+
        #!/bin/bash
        root_folder=$(cd $(dirname $0); cd ..; pwd) 

        kubectl delete -f ${root_folder}/authors-java-jee/deployment/IKS-pipeline-deployment.yaml --ignore-not-found

        sed -e "s|<URL>|notused|g" -e "s|<DB>|local|g" ${root_folder}/authors-java-jee/deployment/deployment.yaml.template > ${root_folder}/authors-java-jee/deployment/temp-deployment.yaml
        sed "s+authors:1+$MY_REGISTRY_URL/$REGISTRY_NAMESPACE/authors:1+g" ${root_folder}/authors-java-jee/deployment/temp-deployment.yaml > ${root_folder}/authors-nodejs/deployment/IKS-kubernetes.yaml
        kubectl apply -f ${root_folder}/authors-nodejs/deployment/IKS-pipeline-deployment.yaml
      
        nodeport=$(kubectl get svc authors --ignore-not-found --output 'jsonpath={.spec.ports[*].nodePort}')
        clusterip=$(ibmcloud ks workers --cluster $PROD_CLUSTER_NAME | awk '/Ready/ {print $2;exit;}')
        echo Sample API call: \"curl 'http://${clusterip}:${nodeport}/api/v1/getauthor?name=Niklas%20Heidloff'\"
  